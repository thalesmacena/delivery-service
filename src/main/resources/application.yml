server:
  port: 8080
  servlet:
    context-path: /delivery-service

springdoc:
  swagger-ui:
    operations-sorter: method
    path: /swagger-ui.html
  api-docs:
    path: /api-docs


spring:
  servlet:
    multipart:
      max-file-size: 8MB
      max-request-size: 100MB
  cache:
    type: redis

  jpa:
    properties:
      hibernate:
        types:
          print:
            banner: false # disable the banner
        default_schema: ${DB_SCHEMA:product}
        dialect: org.hibernate.dialect.PostgreSQLDialect
    generate-ddl: true
    show-sql: false
    hibernate:
      ddl-auto: update
      
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:product}
    username: ${DB_USER:postgres}
    password: ${DB_PASSWORD:postgres}
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      connection-test-query: select 1
      connection-timeout: 25200
      minimum-idle: 1
      maximum-pool-size: 10

redis:
  host: ${REDIS_URL:localhost}
  port: ${REDIS_PORT:6379}
  password: ${REDIS_PASSWORD:}
  timeout: 10000
  database: 1  
  pool:
    max-active: 200
    max-idle: 200
    min-idle: 1


application:
  authentication-service:
    url: ${AUTHENTICATION_SERVICE_URL:https://6237b2afb08c39a3af823f94.mockapi.io/authentication-service}
    pool:
      maxConn: 20
      maxRoutes: 200
      connTimeout: 60000
      readTimeout: 60000
  redis:
    ttl:
      lock: 300
    lock-key: ${REDIS_LOCK_KEY:lock::}

amazon:
  region: ${AWS_REGION:us-east-1}
  accessKey: ${AWS_ACCESS:DELIVERY}
  secretKey: ${AWS_SECRET:DELIVERY}
  use-local-uri: ${AWS_USE_LOCAL_URI:true}
  local-endpoint: ${AWS_LOCAL_ENDPOINT:http://awsdelivery:443}
  
  sqs:
    proxy-host: ${SQS_HOST:localhost}
    proxy-port: ${SQS_PORT:443}
    proxy-protocol: ${SQS_PROTOCOL:HTTP}
    queues:
      delivery-service-order-queue:
        url: ${DELIVERY_SERVICE_PRODUCT_QUEUE_URL:aws2-sqs://delivery-service-order-queue}
        config: ${DELIVERY_SERVICE_PRODUCT_QUEUE_CONFIG:?amazonSQSClient=#sqsClient&concurrentConsumers=1&maxMessagesPerPoll=10&receiveMessageWaitTimeSeconds=20&DefaultVisibilityTimeout=30}
      delivery-service-delete-image-queue:
        url: ${DELIVERY_SERVICE_DELETE_IMAGE_QUEUE_URL:aws2-sqs://delivery-service-delete-image-queue}
        config: ${DELIVERY_SERVICE_DELETE_IMAGE_QUEUE_CONFIG:?amazonSQSClient=#sqsClient&concurrentConsumers=1&maxMessagesPerPoll=10&receiveMessageWaitTimeSeconds=20&DefaultVisibilityTimeout=900}
  
  s3:
    proxy-host: ${S3_HOST:localhost}
    proxy-port: ${S3_PORT:443}
    proxy-protocol: ${S3_PROTOCOL:HTTP}
    object-url-formatter: ${S3_BUCKET_URL_FORMATTER:http://%s.s3.%s.localhost:443/%s}
    buckets:
      delivery-image-bucket:
        url: ${DELIVERY_IMAGE_BUCKET_URL:aws2-s3://delivery-image-bucket}
        config: ${DELIVERY_IMAGE_BUCKET_CONFIG:?amazonS3Client=#s3Client&deleteAfterRead=false}
  kinesis:
    proxy-host: ${KINESIS_HOST:localhost}
    proxy-port: ${KINESIS_PORT:443}
    proxy-protocol: ${KINESIS_PROTOCOL:HTTP}
    streams:
      delivery-service-product-event-stream:
        url: ${DELIVERY_SERVICE_PRODUCT_EVENT_STREAM_URL:aws2-kinesis://delivery-service-product-event-stream}
        config: ${DELIVERY_SERVICE_PRODUCT_EVENT_STREAM_CONFIG:?amazonKinesisClient=#kinesisClient}
        name: ${DELIVERY_SERVICE_PRODUCT_EVENT_NAME:delivery-service-product-event-stream}

management:
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
  endpoints:
    web:
      base-path: /
      exposure:
        include: health, info